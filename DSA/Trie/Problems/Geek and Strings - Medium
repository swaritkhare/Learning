Problem Statement:
Geek has a list Li containing (not necessarily distinct) N words and Q queries. Each query consists of a string x. For each query, find how many strings in the List Li has the string x as its prefix. 

Example 1:
Input: 
N = 5, Q = 5
li[] = {'abracadabra', 'geeksforgeeks', 
      'abracadabra', 'geeks', 'geeksthrill'}
query[] = {'abr', 'geeks', 'geeksforgeeks', 
         'ge', 'gar'}
Output: 2 3 1 3 0
Explaination: 
Query 1: The string 'abr' is prefix of 
two 'abracadabra'. 
Query 2: The string 'geeks' is prefix of three 
strings 'geeksforgeeks', 'geeks' and 'geeksthrill'. 
Query 3: The string 'geeksforgeeks' is prefix 
of itself present in li. 
Query 4: The string 'ge' also is prefix of three 
strings 'geeksforgeeeks', 'geeks', 'geeksthrill'. 
Query 5: The string 'gar' is not a prefix of any 
string in li.

Expected Time Complexity: O(Q*x) + O(N*L) Where Q is the number of queries, x is the longest word in the query, N = number of words inserted in Trie and L = length of longest word inserted in Trie.
Expected Auxiliary Space: O(N*List [i])

Solution:
class TrieNode {
    TrieNode[] children = new TrieNode[26]; // For storing lowercase English letters
    int cntEndWith = 0;
    int cntPrefix = 0;
    
    void increaseEnd() {
            cntEndWith++;
    }

    void increasePrefix() {
        cntPrefix++;
    }
}

class Trie {
    TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Insert a word into the Trie
    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
            node.increasePrefix();
        }
        node.increaseEnd();
    }
    int countWordsStartingWith(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                return 0;
            }
            node = node.children[index];
        }
        return node.cntPrefix;
    }

}
class Solution{
    static List<Integer> prefixCount(int N, int Q, String li[], String query[])
    {
        List<Integer> result = new ArrayList<>();
        Trie trie = new Trie();
        for (String word : li) {
            trie.insert(word);
        }
        for (String word : query) {
            result.add(trie.countWordsStartingWith(word));
        }
        return result;
    }
}
