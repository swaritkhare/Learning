Problem Statement:
Given two Lists of strings s1 and s2, you have to count the number of strings in s2 which is either a suffix or prefix of at least one string of s1.

Example 1:
Input:
s1 = ["cat", "catanddog", "lion"]
s2 = ["cat", "dog", "rat"]
Output: 
2
Explanation: 
String "cat" of s2 is prefix of "catanddog"
& string "dog" of s2 is suffix of "catanddog" 
Example 2:
Input: 
s1 = ["jrjiml", "tchetn", "ucrhye", "ynayhy", 
       "cuhffd", "cvgpoiu", "znyadv"]
s2 = ["jr", "ml", "cvgpoi", "gpoiu", "wnmkmluc", 
      "geheqe", "uglxagyl", "uyxdroj"] 
Output: 
4
Explanation: 
String "jr" of s2 is prefix of "jrjiml", 
"ml" of s2 is suffix of "jrjiml", 
"cvgpoi" of s2 is prefix of "cvgpoiu" &
"gpoiu" of s2 is suffix of "cvgpoiu"

Expected Time Complexity: O(max(len(s1) , len(s2) ))
Expected Space Complexity: O(1)

Solution:
class TrieNode {
    TrieNode[] children = new TrieNode[26]; // For storing lowercase English letters
}

class Trie {
    TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Insert a word into the Trie
    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
    }
    
    public boolean isPrefix(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                return false;
            }
            node = node.children[index];
        }
        return true;
    }

}
class Solution
{
    public int prefixSuffixString(String s1[],String s2[])
    {
        Trie prefixTrie = new Trie();
        Trie suffixTrie = new Trie();
        int count = 0;

        // Insert all words from s1 into the prefix and suffix Tries
        for (String word : s1) {
            // Insert into prefix Trie
            prefixTrie.insert(word);
            // Insert the reversed word into the suffix Trie
            suffixTrie.insert(new StringBuilder(word).reverse().toString());
        }

        // Check for each word in s2 if it's either a prefix or a suffix
        for (String word : s2) {
            if (prefixTrie.isPrefix(word) || suffixTrie.isPrefix(new StringBuilder(word).reverse().toString())) {
                count++;
            }
        }

        return count;
    }
}
