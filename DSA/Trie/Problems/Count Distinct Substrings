Problem statement:
Given a string 'S', you are supposed to return the number of distinct substrings(including empty substring) of the given string. You should implement the program using a trie.

Note :
A string ‘B’ is a substring of a string ‘A’ if ‘B’ that can be obtained by deletion of, several characters(possibly none) from the start of ‘A’ and several characters(possibly none) from the end of ‘A’. 

Two strings ‘X’ and ‘Y’ are considered different if there is at least one index ‘i’  such that the character of ‘X’ at index ‘i’ is different from the character of ‘Y’ at index ‘i’(X[i]!=Y[i]).

Sample Input:
2
sds
abc
Sample Output:
6
7
Explanation of Sample Input:
In the first test case, the 6 distinct substrings are { ‘s’,’ d’, ”sd”, ”ds”, ”sds”, “” }

In the second test case, the 7 distinct substrings are {‘a’, ‘b’, ‘c’, “ab”, “bc”, “abc”, “” }.

Solution:
class Node {
    Node links[] = new Node[26]; 
    boolean flag = false; 
    
    public Node() {
        
    }
    
    boolean containsKey(char ch) {
        return (links[ch - 'a'] != null); 
    }
    Node get(char ch) {
        return links[ch-'a']; 
    }
    void put(char ch, Node node) {
        links[ch-'a'] = node; 
    }
    void setEnd() {
        flag = true; 
    }
    boolean isEnd() {
        return flag; 
    }
};

public class Solution 
{
	public static int countDistinctSubstrings(String s) 
	{
		Node root = new Node(); 
        int n = s.length(); 
        int cnt = 0; 
        for(int i = 0; i < n;i++) {
            Node node = root; 
            for(int j = i;j<n;j++) {
                if(!node.containsKey(s.charAt(j))) {
                    node.put(s.charAt(j), new Node()); 
                    cnt++; 
                }
                node = node.get(s.charAt(j));  
            }
        }
        return cnt + 1; 
	}
}
