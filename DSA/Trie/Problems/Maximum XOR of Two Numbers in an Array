Problem statement:
You are given two arrays of non-negative integers say ‘arr1’ and ‘arr2’. Your task is to find the maximum value of ( ‘A’ xor ‘B’ ) where ‘A’ and ‘B’ are any elements from ‘arr1’ and ‘arr2’ respectively and ‘xor’ represents the bitwise xor operation.

Sample Input:
1
7 7
6 6 0 6 8 5 6
1 7 1 7 8 0 2
Sample Output:
15
Explanation of sample input:
First testcase:
Possible pairs are (6, 7), (6, 8), (6, 2), (8, 7), (8, 8), (6, 2). And 8 xor 7 will give the maximum result i.e. 15

Solution:
class Node{
        Node [] links = new Node[2];
        public Node(){
            
        }
        
        boolean containsKey(int bit){
            return (links[bit] != null);
        }
        Node get(int bit){
            return links[bit];
        }
        void put(int bit, Node node){
            links[bit] = node;
        }
    }
    class Trie{
        private static Node root;
        
        Trie(){
            root = new Node();
        }
        
        public static void insert(int num){
            Node node = root;
            for(int i = 31 ; i>= 0 ; i--){
                int bit = (num >> i) & 1;
                if(!node.containsKey(bit)){
                    node.put(bit,new Node());
                }
                node = node.get(bit);
            }
        }
    
        public static int getMax(int num){
            Node node = root;
            int max = 0;
            for(int i = 31 ; i>= 0 ; i--){
                int bit = (num >> i) & 1;
                if(node.containsKey(1 - bit)){
                    //max = max | (1 << i);
                    max |= (1 << i);
                    node = node.get(1 - bit);
                }
                else{
                    node = node.get(bit);
                }
            }
            return max;
        }
    }

class Solution{

    static int maxXOR(int n, int m, int [] arr1, int [] arr2){
        // code here
        Trie trie = new Trie();
        for(int i = 0 ; i<n ; i++){
            trie.insert(arr1[i]);
        }
        int max = 0;
        for(int i = 0 ; i<m ; i++){
            max = Math.max(max, trie.getMax(arr2[i]));
        }
        return max;
    }
}
