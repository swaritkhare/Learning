The Trie data structure is used to efficiently store and retrieve a set of strings.

It organises strings such that common prefixes are shared among strings, making operations like searching for words with a given prefix efficient. Trie allows for quick retrieval of all strings with a given prefix, making it highly efficient for autocomplete and predictive text applications.

A Trie node is a data structure used to construct Trie. Each node contains the following components:

Links to Child Nodes: A Trie node contains an array of pointers called “links” or “pointer to children” for each letter of the lowercase alphabet. These pointers represent connections to child nodes corresponding to each letter of the alphabet. For instance, the link at index 0 corresponds to the child node representing the letter 'a', the link at index 1 corresponds to 'b', and so forth.
Flag for End of Word: Each Trie node contains a boolean flag indicating whether the node marks the end of a word. This flag is essential for distinguishing between prefixes and complete words stored in the Trie.

Each node in the trie nodes support several operations:

Contains Key: This operation checks whether a specific letter (or key) exists as a child node of the current Trie node. It returns true if the letter is present, indicating a valid path in the Trie.
Get Child Node: Given a letter, this operation retrieves the corresponding child node of the current Trie node. If the letter is present, it returns the pointer to the child node; otherwise, it returns nullptr, signifying the absence of the letter.
Put Child Node: This operation establishes a connection between the current Trie node and a child node representing a particular letter. It sets the link at the corresponding index to point to the provided child node.
Set End Flag: Marks the current Trie node as the end of a word. This flag is crucial for determining whether a string stored in the Trie terminates at this node, indicating a complete word.
Is End of Word: Checks whether the current Trie node signifies the end of a word by examining the end flag. It returns true if the node marks the end of a word; otherwise, it returns false.

Algorithm 1: 
To Insert a Node in the Trie:
Step 1:Start at the root node.

Step 2: For each character in the word:

Check if the current node has a child node corresponding to the character.
If not, create a new node and link it as a child of the current node.
Move to the child node corresponding to the character.
Step 3: Once all characters are inserted, mark the end of the word by setting the flag of the last node to true.


Algorithm 2: 
To Search for a word in the Trie:
Step 1:Start at the root node.

Step 2: For each character in the word:

Check if the current node has a child node corresponding to the character.
If not, the word is not in the Trie.
Move to the child node corresponding to the character.
Step 3: After processing all characters, check if the flag of the last node is set to true. If yes, the word is found; otherwise, it is not.


Algorithm 3: 
Check if Trie contains prefix:
Step 1:Start at the root node.

Step 2: For each character in the prefix:

Check if the current node has a child node corresponding to the character.
If not, there is no word with the given prefix.
Move to the child node corresponding to the character.
Step 3: If all characters of the prefix are found, return true indicating the existence of words with the given prefix.

Time Complexity:

Insertion: O(N) where N is the length of the word being inserted. This is because we have to iterate over each letter of the word to find its corresponding node or create a node accordingly.

Search: O(N) where N is the length of the word being searched for. This is because in Trie search we traverse over each letter for the word from the root, checking if the current node contains a node at the index of the next letter. This process repeats until we reach the end of the word or encounter a node without the next letter.

Prefix Search: O(N) where N is the length of the prefix being searched for. Similar to searching for words, in prefix search we also iterate over each letter of the word to find its corresponding node.

Space Complexity: O(N) where N is the total number of characters across all unique words inserted into the Trie. For each character in a word, a new node may need to be created leading to space proportional to the number of characters.
                            
public class Trie {

    // Node structure for Trie
    static class Node {
        // Array to store links to child nodes,
        // each index represents a letter
        Node[] links = new Node[26];
        // Flag indicating if the node
        // marks the end of a word
        boolean flag = false;

        // Check if the node contains
        // a specific key (letter)
        boolean containsKey(char ch) {
            return links[ch - 'a'] != null;
        }

        // Insert a new node with a specific
        // key (letter) into the Trie
        void put(char ch, Node node) {
            links[ch - 'a'] = node;
        }

        // Get the node with a specific
        // key (letter) from the Trie
        Node get(char ch) {
            return links[ch - 'a'];
        }

        // Set the current node
        // as the end of a word
        void setEnd() {
            flag = true;
        }

        // Check if the current node
        // marks the end of a word
        boolean isEnd() {
            return flag;
        }
    }

    // Trie class
    private Node root;

    // Constructor to initialize the
    // Trie with an empty root node
    public Trie() {
        root = new Node();
    }

    // Inserts a word into the Trie
    // Time Complexity O(len), where len
    // is the length of the word
    public void insert(String word) {
        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node.containsKey(word.charAt(i))) {
                // Create a new node for
                // the letter if not present
                node.put(word.charAt(i), new Node());
            }
            // Move to the next node
            node = node.get(word.charAt(i));
        }
        // Mark the end of the word
        node.setEnd();
    }

    // Returns if the word
    // is in the trie
    public boolean search(String word) {
        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node.containsKey(word.charAt(i))) {
                // If a letter is not found,
                // the word is not in the Trie
                return false;
            }
            // Move to the next node
            node = node.get(word.charAt(i));
        }
        // Check if the last node
        // marks the end of a word
        return node.isEnd();
    }

    // Returns if there is any word in the
    // trie that starts with the given prefix
    public boolean startsWith(String prefix) {
        Node node = root;
        for (int i = 0; i < prefix.length(); i++) {
            if (!node.containsKey(prefix.charAt(i))) {
                // If a letter is not found, there is
                // no word with the given prefix
                return false;
            }
            // Move to the next node
            node = node.get(prefix.charAt(i));
        }
        // The prefix is found in the Trie
        return true;
    }

    public static void main(String[] args) {
        Trie trie = new Trie();
        System.out.println("Inserting words: Striver, Striving, String, Strike");
        trie.insert("striver");
        trie.insert("striving");
        trie.insert("string");
        trie.insert("strike");

        System.out.println("Search if Strawberry exists in trie: " +
                (trie.search("strawberry") ? "True" : "False"));

        System.out.println("Search if Strike exists in trie: " +
                (trie.search("strike") ? "True" : "False"));

        System.out.println("If words in Trie start with Stri: " +
                (trie.startsWith("stri") ? "True" : "False"));
    }
}
                            
// this is to count the number of repeted words, delete a word, coiunt no of prefix
// Define a class for the trie data structure
class Trie {
    // Define a struct for
    // each node in the trie
    static class Node {
        // Array to store
        // links to child nodes
        Node[] links;
        // Counter for number of
        // words that end at this node
        int cntEndWith;
        // Counter for number of words
        // that have this node as a prefix
        int cntPrefix;

        // Constructor for Node
        Node() {
            links = new Node[26];
            cntEndWith = 0;
            cntPrefix = 0;
        }

        // Function to check if the
        // node contains a specific key
        boolean containsKey(char ch) {
            // Check if the link corresponding
            // to the character exists
            return links[ch - 'a'] != null;
        }

        // Function to get the child
        // node corresponding to a key
        Node get(char ch) {
            // Return the link
            // corresponding to the character
            return links[ch - 'a'];
        }

        // Function to insert a child
        // node with a specific key
        void put(char ch, Node node) {
            // Set the link corresponding to
            // the character to the provided node
            links[ch - 'a'] = node;
        }

        // Function to increment the
        // count of words that end at this node
        void increaseEnd() {
            // Increment the counter
            cntEndWith++;
        }

        // Function to increment the count of
        // words that have this node as a prefix
        void increasePrefix() {
            // Increment the counter
            cntPrefix++;
        }

        // Function to decrement the count
        // of words that end at this node
        void deleteEnd() {
            // Decrement the counter
            cntEndWith--;
        }

        // Function to decrement the count of
        // words that have this node as a prefix
        void reducePrefix() {
            // Decrement the counter
            cntPrefix--;
        }
    }

    // Pointer to the
    // root node of the trie
    private Node root;

    // Constructor to initialize
    // the trie with an empty root node
    Trie() {
        // Create a new root node
        root = new Node();
    }

    // Function to insert
    // a word into the trie
    void insert(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each
        // character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is
            // not already in the trie
            if (!node.containsKey(word.charAt(i))) {
                // Create a new node
                // for the character
                node.put(word.charAt(i), new Node());
            }
            // Move to the child node
            // corresponding to the character
            node = node.get(word.charAt(i));
            // Increment the prefix
            // count for the node
            node.increasePrefix();
        }
        // Increment the end count
        // for the last node of the word
        node.increaseEnd();
    }

    // Function to count the number
    // of words equal to a given word
    int countWordsEqualTo(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
            } else {
                // Return 0 if the
                // character is not found
                return 0;
            }
        }
        // Return the count of
        // words ending at the node
        return node.cntEndWith;
    }

    // Function to count the number of
    // words starting with a given prefix
    int countWordsStartingWith(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each character in the prefix
        for (int i = 0; i < word.length(); i++) {
            // If the character is found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
            } else {
                // Return 0 if the
                // character is not found
                return 0;
            }
        }
        // Return the count of
        // words with the prefix
        return node.cntPrefix;
    }

    // Function to erase a
    // word from the trie
    void erase(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each
        // character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is
            // found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
                // Decrement the prefix
                // count for the node
                node.reducePrefix();
            } else {
                // Return if the
                // character is not found
                return;
            }
        }
        // Decrement the end count
        // for the last node of the word
        node.deleteEnd();
    }
}

public class Main {
    public static void main(String[] args) {
        Trie trie = new Trie();
        trie.insert("apple");
        trie.insert("app");
        System.out.println("Inserting strings 'apple', 'app' into Trie");
        System.out.print("Count Words Equal to 'apple': ");
        System.out.println(trie.countWordsEqualTo("apple"));
        System.out.print("Count Words Starting With 'app': ");
        System.out.println(trie.countWordsStartingWith("app"));
        System.out.println("Erasing word 'app' from trie");
        trie.erase("app");
        System.out.print("Count Words Equal to 'apple': ");
        System.out.println(trie.countWordsEqualTo("apple"));
        System.out.print("Count Words Starting With 'apple': ");
        System.out.println(trie.countWordsStartingWith("app"));
    }
}
                            
                        
