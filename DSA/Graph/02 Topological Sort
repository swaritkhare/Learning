# Topological sorting only exists in Directed Acyclic Graph (DAG)

Problem Statement:
Given an adjacency list for a Directed Acyclic Graph (DAG) where adj_list[i] contains a list of all vertices j such that there is a directed edge from vertex i to vertex j, with  V  vertices and E  edges, your task is to find any valid topological sorting of the graph.
In a topological sort, for every directed edge u -> v,  u must come before v in the ordering.

Example :
Input:
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.

Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).

Solution:


/*Complete the function below*/


class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int [] vis = new int[V];
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i< V; i++){
            if(vis[i] == 0){
                dfs(i,adj,vis,st);
            }
        }
        int [] ans = new int[V];
        int i =0;
        while(!st.isEmpty()){
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
    }
    private static void dfs(int i, ArrayList<ArrayList<Integer>> adj, int [] vis, Stack<Integer> st){
        vis[i] = 1;
        for(int data: adj.get(i)){
            if(vis[data] == 0){
                dfs(data,adj,vis,st);
            } 
        }
        st.push(i);
    }
}

Topological sorting only exists in Directed Acyclic Graph (DAG). If the nodes of a graph are connected through directed edges and the graph does not contain a cycle, it is called a directed acyclic graph(DAG). 

The topological sorting of a directed acyclic graph is nothing but the linear ordering of vertices such that if there is an edge between node u and v(u -> v), node u appears before v in that ordering.

Now, let's understand Why topological sort only exists in DAG:

Case 1 (If the edges are undirected): If there is an undirected edge between node u and v, it signifies that there is an edge from node u to v(u -> v) as well as there is an edge from node v to u(v -> u). But according to the definition of topological sorting, it is practically impossible to write such ordering where u appears before v and v appears before u simultaneously. So, it is only possible for directed edges.
Case 2(If the directed graph contains a cycle):

If we try to get topological sorting of this cyclic graph, for edge 1->2, node 1 must appear before 2, for edge 2->3, node 2 must appear before 3, and for edge 3->1, node 3 must appear before 1 in the linear ordering. But such ordering is not possible as there exists a cyclic dependency in the graph. Thereby, topological sorting is only possible for a directed acyclic graph.
Approach: 

We will be solving it using the DFS traversal technique. DFS goes in-depth, i.e., traverses all nodes by going ahead, and when there are no further nodes to traverse in the current path, then it backtracks on the same path and traverses other unvisited nodes.

The algorithm steps are as follows:

We must traverse all components of the graph.
Make sure to carry a visited array(all elements are initialized to 0) and a stack data structure, where we are going to store the nodes after completing the DFS call.
In the DFS call, first, the current node is marked as visited. Then DFS call is made for all its adjacent nodes.
After visiting all its adjacent nodes, DFS will backtrack to the previous node and meanwhile, the current node is pushed into the stack.
Finally, we will get the stack containing one of the topological sortings of the graph.

DFS will start from node 0 and mark it as visited. But it has no adjacent nodes. So the DFS will return putting node 0 into the stack( stack: {0} ).
Then DFS will again start from node 1 and mark it as visited, but it also has no adjacent nodes. So node 1 is pushed into the stack( stack: {1, 0} ) and the DFS call will be over.
Then DFS will start from node 2 and mark it as visited as well. It will again call DFS for its adjacent node 3 and mark 3 as visited. After visiting node 3, it will find out that only adjacent node 1 is previously visited.
So it will backtrack to node 2, putting node 3 first and then node 2 into the stack ( stack: {2, 3, 1, 0} ).
Again, DFS will start from node 4 and mark it as visited. It will find all its adjacent nodes 0 and 1 have been previously visited. So, node 4 will be pushed into the stack( stack: {4, 2, 3, 1, 0} ).
Lastly, DFS will start from node 5 and mark it as visited. Again, it will find all its adjacent nodes 0 and 2 are previously visited. So, it will return putting node 5 into the stack( stack: {5, 4, 2, 3, 1, 0} ).
Finally, the stack will contain {5, 4, 2, 3, 1, 0}, which is one of the topological sortings of the graph.

The linear ordering for the above graph can be 1, 2, 3, 4, 5, 6 or 1, 2, 3, 4, 6, 5. If we closely observe this algorithm, it is designed in such a way that when the DFS call for a node is completed, the node is always kept in the stack. So for example, if the DFS call for 3 is over, we must have the nodes 3, 4, 5, and 6 linearly ordered in the stack. And this is true for every other node. Thus the linear ordering is always maintained for each node of the graph.

Intuition: 
Since we are inserting the nodes into the stack after the completion of the traversal, we are making sure, there will be no one who appears afterward but may come before in the ordering as everyone during the traversal would have been inserted into the stack. 

Note: Points to remember, that node will be marked as visited immediately after making the DFS call and before returning from the DFS call, the node will be pushed into the stack.

Explanantion:
Definition:
Topological Sort (Toposort) is an ordering of the vertices in a Directed Acyclic Graph (DAG) where, for each directed edge u→v, vertex u comes before v in the ordering. This sort is only possible in a DAG (no cycles).

Applications:
Dependency resolution: Useful in scheduling tasks, where some tasks must be done before others.
Build systems: Where you need to compile dependencies in a specific order.
Course scheduling: Courses with prerequisites.

Properties:
Unique Ordering: For some graphs, there can be multiple valid topological orders. If there are no incoming edges for any node, it can be chosen.
Existence: Toposort is only possible if the graph has no cycles.
Vertex Precedence: If there’s an edge u→v, then u will always appear before v in the order.

DFS-Based Algorithm:
Steps:
Perform a DFS traversal of the graph.
As the DFS finishes exploring a node, push it onto a stack.
Once all vertices are visited, the stack contains the vertices in reverse topological order.

Time Complexity: O(V+E).

Simple DAG:
Graph:
Vertices: A, B, C, D, E, F
Edges: A -> B, A -> C, B -> D, C -> D, D -> E, E -> F
Topological Order: A -> B -> C -> D -> E -> F

Multiple Valid Orders:
Graph:
Vertices: 1, 2, 3
Edges: 1 -> 2, 1 -> 3
Topological Orders: 1 -> 2 -> 3 or 1 -> 3 -> 2

Cycle Detection:
If there’s a cycle in the graph, a valid topological sort is impossible. This can be detected by:
DFS: Checking if a node is visited but still in the recursion stack (back edge).
Kahn’s Algorithm: If, after the algorithm finishes, the topological order contains fewer nodes than the graph, there’s a cycle.

Important Concepts:
DAG: A directed acyclic graph is essential for topological sorting.
In-degree: The number of edges incoming to a node.
Edge Types in DFS: Back edges indicate cycles, tree edges contribute to topological order.

Key Use Cases:
Build Dependencies: If a software module requires another, the build must follow the topological order.
Task Scheduling: Order tasks such that prerequisites are met before dependent tasks.

Conclusion:
Topological sorting provides an essential tool in directed acyclic graphs (DAGs), particularly in scenarios requiring the processing of dependencies or sequencing tasks.






