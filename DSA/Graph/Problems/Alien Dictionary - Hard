Problem Statement:
Given a sorted dictionary of an alien language having N words and k starting alphabets of standard dictionary. Find the order of characters in the alien language.
Note: Many orders may be possible for a particular test case, thus you may return any valid order and output will be 1 if the order of string returned by the function is correct else 0 denoting incorrect string returned.

Examples :

Input:  n = 5, k = 4, dict = {"baa","abcd","abca","cab","cad"}
Output: 1
Explanation: Here order of characters is 'b', 'd', 'a', 'c' Note that words are sorted and in the given language "baa" comes before "abcd", therefore 'b' is before 'a' in output.
Similarly we can find other orders.

Input: n = 3, k = 3, dict = {"caa","aaa","aab"}
Output: 1
Explanation: Here order of characters is 'c', 'a', 'b' Note that words are sorted and in the given language "caa" comes before "aaa", therefore 'c' is before 'a' in output.
Similarly we can find other orders.
Expected Time Complexity: O(n * |s| + k)
Expected Auxillary Space: O(k)

Solution:
class Solution {
    public String findOrder(String[] dict, int n, int k) {
        // Write your code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i< k ; i++){
            adj.add(new ArrayList<>());
        }
        
        // Build the graph based on the dictionary order
    for (int i = 0; i < n - 1; i++) {
        String s1 = dict[i];
        String s2 = dict[i + 1];
        int len = Math.min(s1.length(), s2.length());
        boolean foundDiff = false;
        for (int pt = 0; pt < len; pt++) {
            if (s1.charAt(pt) != s2.charAt(pt)) {
                adj.get(s1.charAt(pt) - 'a').add(s2.charAt(pt) - 'a');
                foundDiff = true;
                break;
            }
        }
        // Handle the case where the second word is a prefix of the first word
        if (!foundDiff && s1.length() > s2.length()) {
            return ""; // Invalid ordering
        }
    }

    // Get the topological order of the characters
    List<Integer> top = topo(adj, k);
    
    // If topo sort fails (cycle detected), return an empty string
    if (top.size() < k) {
        return ""; 
    }

    // Build the output string
    StringBuilder ans = new StringBuilder();
    for (int e : top) {
        ans.append((char) (e + 'a'));
    }
    
    return ans.toString();
    }
    
    public List<Integer> topo(List<List<Integer>> adj,int k){
        int [] indeg = new int[k];
        
        for(int i = 0; i< k ; i++){
            for(int e : adj.get(i)){
                indeg[e]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i< k ; i++){
            if(indeg[i] == 0){
                q.add(i);
            }
        }
        List<Integer> top = new ArrayList<>();
        while(!q.isEmpty()){
            int data = q.peek();
            q.remove();
            top.add(data);
            for(int e: adj.get(data)){
                indeg[e]--;
                if(indeg[e] == 0){
                    q.add(e);
                }
                
            }
        }
        return top;
        
    }
}
