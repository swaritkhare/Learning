Problem Statement:
Given an adjacency list of a graph adj of V no. of vertices having 0 based index. Check whether the graph is bipartite or not.

Expected Time Complexity: O(V + E)
Expected Space Complexity: O(V)

Solution:
class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int [] color = new int[V];
        for(int i = 0; i< V; i++){
            color[i] = -1;
        }
        for(int  i = 0; i< V; i++){
            if(color[i] == -1){
                //if(bfs(i, color, adj) == false){
                if(dfs(i,0, color, adj) == false){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean bfs(int start, int [] color, ArrayList<ArrayList<Integer>>adj){
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(start);
        color[start] = 0;
        
        while(!q.isEmpty()){
            int delta = q.peek();
            q.remove();
            
            for( int data : adj.get(delta)){
                if(color[data] == -1){
                    color[data] = 1- color[delta];
                    q.add(data);
                }
                else if( color[data] == color[delta]){
                    return false;
                }
            }
        }
        return true;
    }
    private boolean dfs(int start,int col, int [] color, ArrayList<ArrayList<Integer>>adj){
        color[start] = col;
        for( int data : adj.get(start)){
            if(color[data] == -1){
                if(dfs(data,1-col,color,adj) == false){
                    return false;
                }
            }
            else if( color[data] == col){
                return false;
            }
        }
        return true;
    }
}
