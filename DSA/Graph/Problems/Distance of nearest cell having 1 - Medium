Problem Statement:
Given a binary grid of n*m. Find the distance of the nearest 1 in the grid for each cell.
The distance is calculated as |i1  - i2| + |j1 - j2|, where i1, j1 are the row number and column number of the current cell, and i2, j2 are the row number and column number of the nearest cell having value 1. There should be atleast one 1 in the grid.

Example:
Input: 
grid = {{0,1,1,0},{1,1,0,0},{0,0,1,1}}
Output: 
{{1,0,0,1},{0,0,1,1},{1,1,0,0}}
Explanation: 
The grid is-
0 1 1 0 
1 1 0 0 
0 0 1 1 
- 0's at (0,0), (0,3), (1,2), (1,3), (2,0) and (2,1) are at a distance of 1 from 1's at (0,1), (0,2), (0,2), (2,3), (1,0) and (1,1) respectively.

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Solution:


class Solution
{
    class pair{
        int rw;
        int cl;
        int stp;
        public pair(int rw, int cl, int stp){
            this.rw = rw;
            this.cl = cl;
            this.stp = stp;
        }
    }
    //Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid)
    {
        int m = grid.length;
        int n = grid[0].length;
        int [][] vis = new int[m][n];
        int [][] result = new int[m][n];
        Queue<pair> q = new LinkedList<pair>();
        for(int i = 0; i<m;i++){
            for(int j = 0; j< n; j++){
                if(grid[i][j] == 1) {
                    q.add(new pair(i,j,0));
                    vis[i][j] = 1;
                }
                else{
                    vis[i][j] = 0;
                }
            }
        }
        
        int [] drow = {-1,0,+1,0};
        int [] dcol = {0,+1,0,-1};
        
        while(!q.isEmpty()){
            int row = q.peek().rw;
            int col = q.peek().cl;
            int steps = q.peek().stp;
            q.remove();
            result[row][col] = steps;
            for(int i =0; i< 4;i++){
                int nrow = row + drow[i];
                int ncol = col + dcol[i];
                if(nrow>=0 && nrow<m && ncol >=0 && ncol<n && vis[nrow][ncol] == 0){
                    vis[nrow][ncol] = 1;
                    q.add(new pair(nrow,ncol,steps+1));
                }
            }
        }
        return result;
    }
}
