Problem Statement:
Given start, end and an array arr of n numbers. At each step, start is multiplied with any number in the array and then mod operation with 100000 is done to get the new start.

Your task is to find the minimum steps in which end can be achieved starting from start. If it is not possible to reach end, then return -1.

Example:
Input:
arr[] = {2, 5, 7}
start = 3, end = 30
Output:
2
Explanation:
Step 1: 3*2 = 6 % 100000 = 6 
Step 2: 6*5 = 30 % 100000 = 30

Expected Time Complexity: O(105)
Expected Space Complexity: O(105)

Solution:
class Solution {
     class pair{
        int first;
        int second;
        public pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }
    int minimumMultiplications(int[] arr, int start, int end) {
        if (start == end) return 0;
        Queue<pair> q = new LinkedList<>();
        int [] dist = new int[100000];
        Arrays.fill(dist, (int)(1e9));
        
        dist[start] = 0;
        q.add(new pair(start ,0));
        
        int mod = 100000;
        int n = arr.length; 
        while(!q.isEmpty()){
            int st = q.peek().first;
            int stop = q.peek().second;
            q.remove();
            
            for(int i = 0; i< n ; i++ ){
                int num = (arr[i]*st) % mod;
                if(stop + 1 < dist[num]){
                    dist[num] = stop + 1;
                    if(num == end) return stop +1;
                    q.add(new pair(num,stop+1));
                }
            }
        }
        return -1;
        
    }
}
