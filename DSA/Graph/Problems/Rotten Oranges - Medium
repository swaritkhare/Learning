Problem Statement:
Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
Example:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.

Solution:
class Solution
{
    class pair{
        int rw;
        int cl;
        int tm;
        public pair(int rw, int cl, int tm){
            this.rw = rw;
            this.cl = cl;
            this.tm = tm;
        }
    }
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
        int m = grid.length;
        int n = grid[0].length;
        Queue<pair> q = new LinkedList<pair>();
        int [][] vis = new int[m][n];
        int cntfresh = 0;
        
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n ; j++){
                if(grid[i][j] == 2){
                    q.add(new pair(i,j,0));
                    vis[i][j] = 2;
                }
                else{
                    vis[i][j] = 0;
                }
                if(grid[i][j] == 1) cntfresh++;
            }
        }
        
        int tim =0;
        int [] delrow = {-1,0,+1,0};
        int [] delcol = {0,+1,0,-1};
        int cnt = 0;
        while(!q.isEmpty()){
            int r = q.peek().rw;
            int c = q.peek().cl;
            int t = q.peek().tm;
            tim = Math.max(tim,t);
            q.remove();
            
            for(int i = 0; i< 4; i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                if(nrow >=0 && nrow <m && ncol >=0 && ncol<n && grid[nrow][ncol] == 1 && vis[nrow][ncol] == 0){
                    q.add(new pair(nrow, ncol, t+1));
                    vis[nrow][ncol] = 2;
                    cnt++;
                }
            }
        }
        
        if(cnt != cntfresh) return -1;
        return tim;
    }
}
