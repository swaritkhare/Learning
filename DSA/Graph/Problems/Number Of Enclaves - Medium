Problem Statement:
You are given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.

Example 1:
Input:
grid[][] = {{0, 0, 0, 0},
            {1, 0, 1, 0},
            {0, 1, 1, 0},
            {0, 0, 0, 0}}
Output:
3
Explanation:
0 0 0 0
1 0 1 0
0 1 1 0
0 0 0 0
The highlighted cells represents the land cells.
Example 2:

Input:
grid[][] = {{0, 0, 0, 1},
            {0, 1, 1, 0},
            {0, 1, 1, 0},
            {0, 0, 0, 1},
            {0, 1, 1, 0}}
Output:
4
Explanation:
0 0 0 1
0 1 1 0
0 1 1 0
0 0 0 1
0 1 1 0
The highlighted cells represents the land cells.

Expected Time Complexity: O(n * m)
Expected Space Complexity: O(n * m)

Solution:
class Solution {
    class Pair{
        int first;
        int second;
        public Pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }

    int numberOfEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int [][] vis = new int[m][n];
        Queue<Pair> q = new LinkedList<Pair>();
        for(int i = 0;i<m;i++){
            for(int j = 0; j< n; j++){
                if(i == 0 || j == 0 || i == m-1 || j == n-1){
                    if(grid[i][j] == 1){
                        vis[i][j] = 1;
                        q.add(new Pair(i,j));
                    }
                }
            }
        }
        
        int [] drow = {-1,0,+1,0};
        int [] dcol = {0,+1,0,-1};
        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();
            for(int i = 0; i< 4; i++){
                int nrow = row + drow[i];
                int ncol = col + dcol[i];
                if(nrow >=0 && nrow<m && ncol >=0 && ncol<n && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                    vis[nrow][ncol] = 1;
                    q.add(new Pair(nrow,ncol));
                }
            }
        }
        
        int count = 0;
        for(int i = 0;i<m;i++){
            for(int j = 0; j< n; j++){
                if(grid[i][j] == 1 && vis[i][j] == 0) {
                    count++;
                }
            }
        }
        return count;
    }
}
