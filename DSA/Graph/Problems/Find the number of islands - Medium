Problem Statement:
Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.
Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Examples:
Input: grid = [[0,1],[1,0],[1,1],[1,0]]
Output: 1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.
Input: grid = [[0,1,1,1,0,0,0],[0,0,1,1,0,1,0]]
Output: 2
Expanation:
The grid is-
0 1 1 1 0 0 0
0 0 1 1 0 2 0
There are two islands :- one is 1 1 1 and another is 2.
                                  1 1

Expected Time Complexity: O(n*m)
Expected Space Complexity: O(n*m)

Solution:
class Solution {
    class pair{
        int first;
        int second;
        public pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int [][] vis = new int[m][n];
        int count = 0;
        for(int row = 0;row<m;row++){
            for(int col = 0; col<n ; col++){
                if(vis[row][col] == 0 && grid[row][col] == '1'){
                    bfs(row,col,grid,vis,m,n);
                    count++;
                }
            }
        }
        return count;
    }
    private void bfs(int ro, int co, char[][] grid, int[][] vis, int m, int n){
        vis[ro][co] = 1;
        Queue<pair> q = new LinkedList<pair>();
        q.add(new pair(ro,co));
        
        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();
            
            for( int drow = -1; drow<=1; drow++){
                for(int dcol = -1; dcol <=1; dcol++){
                    int nrow = row + drow;
                    int ncol = col + dcol;
                    if(nrow >= 0 && ncol >= 0 && nrow< m && ncol < n && grid[nrow][ncol] == '1'
                    && vis[nrow][ncol] == 0){
                        vis[nrow][ncol] = 1;
                        q.add(new pair(nrow,ncol));
                    }
                }
            }
        }
    }
}
