Problem Statement:
Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Example:

Input: 
n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: 
ans = {{'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Explanation: 
Following the rule the above matrix is the resultant matrix. 

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Solution:
class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        int [][] vis = new int[n][m];
        for(int i = 0;i<m;i++){
            if(vis[0][i] == 0 && a[0][i] == 'O'){
                dfs(0,i,vis,a);
            }
            if(vis[n-1][i] == 0 && a[n-1][i] == 'O'){
                 dfs(n-1,i,vis,a);
            }
        }
        for(int j = 0;j<n;j++){
            if(vis[j][0] == 0 && a[j][0] == 'O'){
                dfs(j,0,vis,a);
            }
            if(vis[j][m-1] == 0 && a[j][m-1] == 'O'){
                 dfs(j,m-1,vis,a);
            }
        }
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(vis[i][j] == 0 && a[i][j] == 'O'){
                    a[i][j] = 'X';
                }
            }
        }
        return a;
    }
    private static void dfs(int row, int col, int [][] vis, char a[][]){
        int [] drow = {-1,0,+1,0};
        int [] dcol = {0,+1,0,-1};
        vis[row][col] = 1;
        int n = a.length;
        int m = a[0].length;
        
        for(int i = 0; i<4;i++){
            int nrow = row + drow[i];
            int ncol = col + dcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol] == 0 && a[nrow][ncol] == 'O') {
                dfs(nrow,ncol,vis,a);
            }
        }
    }
    
    // static char[][] fill(int n, int m, char[][] a) {
    //     // Initialize the visited array with the correct dimensions
    //     int[][] vis = new int[n][m];

    //     // Traverse the boundary rows and columns to start DFS
    //     for (int i = 0; i < m; i++) {
    //         if (vis[0][i] == 0 && a[0][i] == 'O') {
    //             dfs(0, i, vis, a);
    //         }
    //         if (vis[n - 1][i] == 0 && a[n - 1][i] == 'O') {
    //             dfs(n - 1, i, vis, a);
    //         }
    //     }
    //     for (int j = 0; j < n; j++) {
    //         if (vis[j][0] == 0 && a[j][0] == 'O') {
    //             dfs(j, 0, vis, a);
    //         }
    //         if (vis[j][m - 1] == 0 && a[j][m - 1] == 'O') {
    //             dfs(j, m - 1, vis, a);
    //         }
    //     }

    //     // Fill the unvisited 'O' cells with 'X'
    //     for (int i = 0; i < n; i++) {
    //         for (int j = 0; j < m; j++) {
    //             if (vis[i][j] == 0 && a[i][j] == 'O') {
    //                 a[i][j] = 'X';
    //             }
    //         }
    //     }
    //     return a;
    // }

    // private static void dfs(int row, int col, int[][] vis, char[][] a) {
    //     int[] drow = {-1, 0, +1, 0};
    //     int[] dcol = {0, +1, 0, -1};
    //     vis[row][col] = 1;
    //     int n = a.length;
    //     int m = a[0].length;

    //     for (int i = 0; i < 4; i++) {
    //         int nrow = row + drow[i];
    //         int ncol = col + dcol[i];
    //         if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0 && a[nrow][ncol] == 'O') {
    //             dfs(nrow, ncol, vis, a);
    //         }
    //     }
    // }
}
