Problem Statement:
Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
Note: One can move from node u to node v only if there's an edge from u to v. Find the BFS traversal of the graph starting from the 0th vertex, from left to right according to the input graph. Also, you should only take nodes directly or indirectly connected from Node 0 in consideration.

Example:

Input:
V = 5, E = 4
adj = {{1,2,3},{},{4},{},{}}
Output: 
0 1 2 3 4
Explanation: 
0 is connected to 1 , 2 , 3.
2 is connected to 4.
so starting from 0, it will go to 1 then 2
then 3. After this 2 to 4, thus bfs will be
0 1 2 3 4.

Solution:
class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList < Integer> bfs = new ArrayList<>();
        Queue < Integer> que = new LinkedList<>();
        boolean [] vis = new boolean[V];
        
        que.add(0);
        vis[0] = true;
        
        while(!que.isEmpty()){
            int data = que.poll();
            bfs.add(data);
            
            for( Integer e : adj.get(data)){
                if(vis[e] == false){
                    vis[e] = true;
                    que.add(e);
                }
                
            }
        }
        return bfs;
        
    }
}

Explanantion:
Breadth-First Search (BFS) is a fundamental algorithm used for traversing or searching tree or graph data structures. It explores all the neighbors at the present depth prior to moving on to nodes at the next depth level. BFS is commonly used in various applications, such as finding the shortest path in an unweighted graph, level order traversal of trees, and network broadcasting.

Key Characteristics of BFS
Level Order Traversal: BFS visits nodes in layers. It starts from a selected node (often called the root in trees) and explores all of its neighbors before moving on to the neighbors' neighbors.

Queue-Based Implementation: BFS typically uses a queue data structure to keep track of the next node to explore. This ensures that nodes are processed in the order they are discovered.

Shortest Path: In unweighted graphs, BFS can be used to find the shortest path from the starting node to all other nodes.

Space Complexity: The maximum number of nodes in the queue can go up to O(b^d), where b is the branching factor (average number of children per node) and d is the depth of the shallowest goal node.

Time Complexity: The time complexity is O(V+E), where V is the number of vertices and E is the number of edges in the graph.

BFS Algorithm Steps
Initialize:
Start with a queue and add the starting node.
Create a set or array to track visited nodes to avoid processing a node more than once.

Iterate:
While the queue is not empty:
Dequeue the front node.
Process the node (e.g., print its value, add it to the result list).
For each unvisited neighbor of the dequeued node:
Mark it as visited.
Enqueue the neighbor.

End Condition: The algorithm stops when all reachable nodes have been processed.
