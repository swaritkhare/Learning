Problem Statement:
Given a set of n jobs where each jobi has a deadline and profit associated with it.
Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with a job if and only if the job is completed by its deadline.
Find the number of jobs done and the maximum profit.
Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job. Deadline of the job is the time on or before which job needs to be completed to earn the profit.

Examples :
Input: Jobs = [[1,4,20],[2,1,1],[3,1,40],[4,1,30]]
Output: 2 60
Explanation: Job1 and Job3 can be done with maximum profit of 60 (20+40).
Input: Jobs = [[1,2,100],[2,1,19],[3,2,27],[4,1,25],[5,1,15]]
Output: 2 127
Explanation: 2 jobs can be done with maximum profit of 127 (100+27).

Expected Time Complexity: O(nlogn)
Expected Auxilliary Space: O(n)

Solution:
Approach:  The strategy to maximize profit should be to pick up jobs that offer higher profits. Hence we should sort the jobs in descending order of profit. Now say if a job has a deadline of 4 we can perform it anytime between day 1-4, but it is preferable to perform the job on its last day. This leaves enough empty slots on the previous days to perform other jobs.

Basic Outline of the approach:-
Sort the jobs in descending order of profit. 
If the maximum deadline is x, make an array of size x .Each array index is set to -1 initially as no jobs have been performed yet.
For every job check if it can be performed on its last day.
If possible mark that index with the job id and add the profit to our answer. 
If not possible, loop through the previous indexes until an empty slot is found.

Time Complexity: O(N log N) + O(N*M).
O(N log N ) for sorting the jobs in decreasing order of profit. O(N*M) since we are iterating through all N jobs and for every job we are checking from the last deadline, say M deadlines in the worst case.
Space Complexity: O(M) for an array that keeps track of which day job is performed if M is the maximum deadline available.

Code:
class Job {
   int id, profit, deadline;
   Job(int x, int y, int z) {
      this.id = x;
      this.deadline = y;
      this.profit = z;
   }
}

class solve {
   int[] JobScheduling(Job arr[], int n) {
      Arrays.sort(arr, (a, b) -> (b.profit - a.profit));
      int maxi = 0;
      for (int i = 0; i < n; i++) {
         if (arr[i].deadline > maxi) {
            maxi = arr[i].deadline;
         }
      }
      int result[] = new int[maxi + 1];
      for (int i = 1; i <= maxi; i++) {
         result[i] = -1;
      }
      int countJobs = 0, jobProfit = 0;
      for (int i = 0; i < n; i++) {
         for (int j = arr[i].deadline; j > 0; j--) {
            if (result[j] == -1) {
               result[j] = i;
               countJobs++;
               jobProfit += arr[i].profit;
               break;
            }
         }
      }

      int ans[] = new int[2];
      ans[0] = countJobs;
      ans[1] = jobProfit;
      return ans;

   }
}
class Main {
   public static void main(String[] args) throws IOException {

      Job[] arr = new Job[4];
      arr[0] = new Job(1, 4, 20);
      arr[1] = new Job(2, 1, 10);
      arr[2] = new Job(3, 2, 40);
      arr[3] = new Job(4, 2, 30);

      solve ob = new solve();
      int[] res = ob.JobScheduling(arr, 4);
      System.out.println(res[0] + " " + res[1]);

   }
}

Job Sequencing Problem using Disjoint Set Union (DSU) involves optimizing job scheduling where jobs have deadlines, and you want to maximize profit. Each job has a fixed deadline and can be scheduled for one unit of time. You cannot perform two jobs at the same time, and each job should be completed by its deadline.

Problem Overview:
You are given N jobs where each job i has a:
Profit P[i]
Deadline D[i]
Objective: Schedule the jobs to maximize the total profit while ensuring that no job's deadline is missed.
DSU Approach for Job Sequencing:
Why DSU?
We use Disjoint Set Union (DSU) to keep track of the latest available time slots for scheduling jobs efficiently.

Steps:
Sort Jobs by Profit:

Sort the jobs in descending order of profit. This ensures that we try to schedule the most profitable job first.
DSU for Slot Management:

Use DSU to manage the available slots dynamically.
Each element represents a time slot, and DSU helps to efficiently find the latest available slot where a job can be scheduled before its deadline.
Job Scheduling:

For each job, attempt to schedule it on its deadline or the latest available slot before its deadline.
Use DSU to find the next available time slot when a slot is taken.
If a slot is free, perform a union of the current slot with the previous slot.
Detailed Steps:
Sort jobs by profit in descending order.

Initialize DSU with parent[i] = i for each time slot.

For each job:

Check if there is a free slot available by using find(deadline).
If available, assign the job to the slot and update DSU by merging (union) the slot with the previous one (slot - 1).
Continue this for all jobs and maximize the profit.

Code Implementation in Java:
java
Copy code
import java.util.*;

class Job {
    int id, profit, deadline;
    
    Job(int id, int profit, int deadline) {
        this.id = id;
        this.profit = profit;
        this.deadline = deadline;
    }
}

class DSU {
    int[] parent;
    
    public DSU(int n) {
        parent = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }
    
    public int find(int x) {
        if (parent[x] == x)
            return x;
        return parent[x] = find(parent[x]);
    }
    
    public void union(int x, int y) {
        parent[find(x)] = find(y);
    }
}

public class JobSequencingWithDSU {
    public static int jobScheduling(Job[] jobs, int n) {
        // Sort jobs by profit in descending order
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);
        
        // Find maximum deadline
        int maxDeadline = 0;
        for (Job job : jobs) {
            maxDeadline = Math.max(maxDeadline, job.deadline);
        }
        
        // Initialize DSU for slot management
        DSU dsu = new DSU(maxDeadline);
        
        int totalProfit = 0;
        
        // Iterate over each job
        for (Job job : jobs) {
            // Find the latest available slot before or on job.deadline
            int availableSlot = dsu.find(job.deadline);
            
            if (availableSlot > 0) {
                // Assign the job to this slot and update DSU
                dsu.union(availableSlot, availableSlot - 1);
                totalProfit += job.profit;
            }
        }
        
        return totalProfit;
    }
    
    public static void main(String[] args) {
        Job[] jobs = {
            new Job(1, 100, 2),
            new Job(2, 19, 1),
            new Job(3, 27, 2),
            new Job(4, 25, 1),
            new Job(5, 15, 3)
        };
        
        int n = jobs.length;
        System.out.println("Maximum Profit: " + jobScheduling(jobs, n));
    }
}
Explanation of Code:
Job class: Represents each job with its id, profit, and deadline.
DSU class: Manages the time slots using a parent array.
jobScheduling function:
Jobs are sorted by profit.
The DSU is used to find the latest available time slot for scheduling.
If a slot is available, the job is assigned, and the total profit is updated.
Time Complexity:
Sorting the jobs: O(N log N).
DSU operations (find and union) for each job: nearly O(1), due to path compression.
Overall time complexity: O(N log N), which is efficient for job sequencing.
Advantages of DSU:
Efficient slot management.
Reduces the complexity of checking and assigning free slots.
This approach guarantees maximum profit by ensuring that each job is scheduled as late as possible, allowing the most profitable jobs to be prioritized.
