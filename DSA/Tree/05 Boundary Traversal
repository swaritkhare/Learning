class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}

class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        ArrayList<Integer> ar = new ArrayList<>();
        if(isleaf(node) == false) ar.add(node.data);
        addleft(node, ar);
        addleaf(node,ar);
        addright(node,ar);
        return ar;
    }
    
    void addleft(Node node, ArrayList<Integer> ar){
        Node ro = node.left;
        while(ro != null){
            if(isleaf(ro) == false) ar.add(ro.data);
            if(ro.left != null) ro = ro.left;
            else ro = ro.right;
        }
    }
    
    void addright(Node node, ArrayList<Integer> ar){
        Node ro = node.right;
        ArrayList<Integer> temp = new ArrayList<>();
        while(ro != null){
            if(isleaf(ro) == false) temp.add(ro.data);
            if(ro.right != null) ro = ro.right;
            else ro = ro.left;
        }
        for(int i = temp.size() -1; i>= 0; --i){
            ar.add(temp.get(i));
        }
    }
    
    void addleaf(Node node, ArrayList<Integer> ar){
        if(isleaf(node)){
            ar.add(node.data);
            return;
        }
        if(node.left != null) addleaf(node.left , ar);
        if(node.right != null) addleaf(node.right, ar);
    }
    
    boolean isleaf(Node node){
        return (node != null && node.left == null && node.right == null);
    }
}

