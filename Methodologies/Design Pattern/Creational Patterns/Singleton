Singleton Design Pattern
The Singleton Design Pattern ensures that a class has only one instance throughout the application lifecycle and provides a global access point to that instance. It is a creational design pattern.

1. Key Features
  Single Instance: Ensures only one instance of the class exists.
  Global Access Point: Provides a way to access the instance globally.
  Controlled Access: Prevents instantiation from outside the class.

2. Use Cases
  Logging (e.g., Logger classes).
  Database connections.
  Configuration settings.
  Thread pools.
  Caches.

3. Implementation Approaches
  1. Lazy Initialization
    The instance is created only when it is needed.
    Pros: Saves resources by delaying initialization.
    Cons: Not thread-safe.
    IMP: Make constructor private
         Object must be created with the help of Method
         Create filed to store object must be private

    public class Singleton {
        private static Singleton singleton;
        
        private Singleton() {
        }
        
        public static Singleton getSingleton() {
            if (singleton == null) {
                singleton = new Singleton();
            }
            return singleton;
        }
    }

    public class Example {
      public static void main(String[] args) {
          Singleton singleton1 = Singleton.getSingleton();
          System.out.println(singleton1.hashCode());
          Singleton singleton2 = Singleton.getSingleton();
          System.out.println(singleton1.hashCode());
  
          //singleton1.displayMessage();
          //System.out.println("Are both instances the same? " + (singleton1 == singleton2));
      }
    }

  2. Eager Initialization
    The instance is created at the time of class loading.
    Pros: Thread-safe without additional synchronization overhead.
    Cons: The instance is created even if it is never used.

    public class Singleton {
        private static final Singleton singleton = new Singleton();
        
        private Singleton() {
        }
        
        public static Singleton getSingleton() {
            return singleton;
        }
    }

    public class Example {
      public static void main(String[] args) {
          System.out.println(Singleton.getSingleton().hashCode());
          System.out.println(Singleton.getSingleton().hashCode());
      }
    }

  3. Thread-Safe Singleton (Synchronized Method)
    Ensures thread safety by synchronizing the getInstance method.
    Pros: Thread-safe.
    Cons: Slower performance due to synchronization. 
          As if the code of getSingleton have more lines of code above the if condition then all other threads need to wait for one thread to complete the method.

    public class Singleton {
        private static Singleton singleton;
        
        private Singleton() {
        }
        
        public static synchronized Singleton getSingleton() {
            if (singleton == null) {
                singleton = new Singleton();
            }
            return singleton;
        }
    }

  4. Thread-Safe Singleton (Double-Checked Locking)
    Synchronization is applied only when the instance is null.
    Pros: Efficient and thread-safe.
    Cons: Slightly complex implementation.

    public class Singleton {
        private static volatile Singleton singleton;
        
        private Singleton() {
        }
        
        public static Singleton getSingleton() {
            if (singleton == null) {
                synchronized (Singleton.class) {
                    if (singleton == null) {
                        singleton = new Singleton();
                    }
                }
            }
            return singleton;
        }
    }

  5. Bill Pugh Singleton
    Utilizes the Java class loading mechanism to achieve thread safety without synchronization.
    Pros: Lazy-loaded and efficient.
    Cons: None; itâ€™s widely regarded as the best approach.
  
    public class Singleton {
        private Singleton() {
        }
        
        private static class SingletonHelper {
            private static final Singleton INSTANCE = new Singleton();
        }
        
        public static Singleton getInstance() {
            return SingletonHelper.INSTANCE;
        }
    }

  6. Enum Singleton
    Java enums are inherently singleton.
    Pros: Simplest and most robust implementation.
    Cons: May not be suitable for scenarios requiring lazy initialization.
  
    public enum Singleton {
        INSTANCE;
        
        public void show() {
            System.out.println("Singleton using Enum!");
        }
    }

4. Real-World Examples
  Logging Frameworks:
  A single logger instance is used throughout the application.
  Database Connection Pooling:
  Ensures only one pool is created and shared.
  Configuration Management:
  Centralized management of application settings.

5. Breaking of Singleton Design Pattern
  1. Reflection:
    Reflection can break Singleton by allowing multiple instances.

    public class Example {
      public static void main(String[] args) throws Exception{
          Singleton singleton1 = Singleton.getSingleton();
          System.out.println(singleton1.hashCode());

          Constructor<Singleton> constructor = Singleton.class.getDeclaredConstructor();
          constructor.setAccessible(true);
          Singleton singleton2 = constructor.newInstance();
          System.out.println(singleton2.hashCode());
      }
    }

    Solution 1: Throw an exception in the constructor if an instance already exists.
      public class Singleton {
          private static Singleton singleton;
          
          private Singleton() {
             if (singleton != null) {
                throw new IllegalStateException("Instance already created");
            }
          }
          
          public static Singleton getSingleton() {
              if (singleton == null) {
                  singleton = new Singleton();
              }
              return singleton;
          }
      }

    Solution 2: use ENUMS
  
  2. Serialization and Deserialization:
    Serialization can create new instances.

    public class Example {
      public static void main(String[] args) throws Exception{
          Singleton singleton1 = Singleton.getSingleton();
          System.out.println(singleton1.hashCode());
          ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(abc.ob));
          oos.writeobject(singleton);
          System.out.println("Serialization done");
          
          ObjectInputStream ois = new ObjectInputStream(new FileOutputStream(abc.ob));
          Singleton singleton2 = (Singleton)ois.readobject(singleton);
          System.out.println(singleton2.hashCode());
      }
    }

    Solution: implements readResolve to return the existing instance.
      public class Singleton implements Serializable{
          private static Singleton singleton;
          
          private Singleton() {
          }
          
          public static Singleton getSingleton() {
              if (singleton == null) {
                  singleton = new Singleton();
              }
              return singleton;
          }

          private Object readResolve() {
              return getSingleton();
          }
      }

  3. Cloning:
    Cloning can create multiple instances.

   public class Example {
      public static void main(String[] args) throws Exception, CloneNotSupportedException{
          Singleton singleton1 = Singleton.getSingleton();
          System.out.println(singleton1.hashCode());

          Singleton singleton2 = (Singleton)singleton1.clone();
          System.out.println(singleton2.hashCode());
          
      }
    }

    Solution: Override clone to throw an exception.
    public class Singleton implements Serializable, Cloneable{
        private static Singleton singleton;
        
        private Singleton() {
        }
        
        public static Singleton getSingleton() {
            if (singleton == null) {
                singleton = new Singleton();
            }
            return singleton;
        }
  
        public Object readResolve() {
            return getSingleton();
        }
        //@Override
        //protected Object clone() throws CloneNotSupportedException {
            //throw new CloneNotSupportedException();
        //}
        @Override
        public Object clone() throws CloneNotSupportedException{
            return super.clone();
            // solution is to return singleton;
        }
    }

6. Pros and Cons
  Pros:
    Controlled Access: Centralized control of the instance.
    Efficient Resource Management: Shared instance reduces overhead.
    Consistency: Ensures a single point of control for global objects.
  Cons:
    Global State: Can introduce hidden dependencies and make testing harder.
    Single Responsibility Violation: Singleton classes may handle multiple responsibilities.
    Difficult in Multithreaded Contexts: Needs careful implementation to ensure thread safety.

7. Frequently Asked Interview Questions
  Why is Singleton considered an anti-pattern?
  It can introduce global state, which makes testing and debugging harder.

  Which Singleton approach is the best?
  Bill Pugh Singleton or Enum Singleton is the most recommended due to thread safety and simplicity.

  How do you break a Singleton in Java?
  Using Reflection, Serialization, or Cloning.

  How does the Double-Checked Locking Singleton work?
  It minimizes synchronization overhead by checking instance before and after locking.

  Why is the volatile keyword used in Double-Checked Locking?
  To prevent instruction reordering by the JVM.
