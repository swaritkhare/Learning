Builder Design Pattern
The Builder Design Pattern is a creational design pattern that separates the construction of a complex object from its representation, allowing the same construction process to create different representations. It is particularly useful when an object requires numerous steps to be constructed or when its creation involves optional parameters.

When to Use the Builder Pattern?
  When an object has a large number of optional attributes or configuration options.
  When constructing an object involves complex assembling steps.
  To improve the readability and maintainability of code for creating such objects.
  To achieve immutability in the constructed object.

Key Components of the Builder Pattern
  Product: The complex object being built.
  Builder: Abstract interface or class defining the construction steps.
  ConcreteBuilder: Implements the Builder interface to construct and assemble parts of the product.
  Director: Controls the construction process using a builder.
  Client: Requests object creation through the Director and retrieves the built object.

Implementation Example: Building a House
  Step 1: Define the Product
  Define the House class with several properties.
  public class House {
      private String foundation;
      private String structure;
      private String roof;
      private boolean hasGarden;
      private boolean hasGarage;
  
      // Private constructor to enforce usage of Builder
      private House(HouseBuilder builder) {
          this.foundation = builder.foundation;
          this.structure = builder.structure;
          this.roof = builder.roof;
          this.hasGarden = builder.hasGarden;
          this.hasGarage = builder.hasGarage;
      }
  
      @Override
      public String toString() {
          return "House [foundation=" + foundation + ", structure=" + structure +
                 ", roof=" + roof + ", hasGarden=" + hasGarden + ", hasGarage=" + hasGarage + "]";
      }
  
      // Static nested Builder class
      public static class HouseBuilder {
          private String foundation;
          private String structure;
          private String roof;
          private boolean hasGarden;
          private boolean hasGarage;
  
          // Builder methods for setting attributes
          public HouseBuilder setFoundation(String foundation) {
              this.foundation = foundation;
              return this;
          }
  
          public HouseBuilder setStructure(String structure) {
              this.structure = structure;
              return this;
          }
  
          public HouseBuilder setRoof(String roof) {
              this.roof = roof;
              return this;
          }
  
          public HouseBuilder setGarden(boolean hasGarden) {
              this.hasGarden = hasGarden;
              return this;
          }
  
          public HouseBuilder setGarage(boolean hasGarage) {
              this.hasGarage = hasGarage;
              return this;
          }
  
          // Build method to create a House instance
          public House build() {
              return new House(this);
          }
      }
  }

  Step 2: Demonstrate Usage
  public class BuilderPatternDemo {
      public static void main(String[] args) {
          // Create a house using the builder pattern
          House house = new House.HouseBuilder()
                              .setFoundation("Concrete")
                              .setStructure("Brick")
                              .setRoof("Tiles")
                              .setGarden(true)
                              .setGarage(true)
                              .build();
  
          System.out.println(house);
  
          // Create another house with different configuration
          House simpleHouse = new House.HouseBuilder()
                                       .setFoundation("Wood")
                                       .setStructure("Wooden panels")
                                       .setRoof("Shingles")
                                       .setGarden(false)
                                       .setGarage(false)
                                       .build();
  
          System.out.println(simpleHouse);
      }
  }

  Output
  House [foundation=Concrete, structure=Brick, roof=Tiles, hasGarden=true, hasGarage=true]
  House [foundation=Wood, structure=Wooden panels, roof=Shingles, hasGarden=false, hasGarage=false]

Advantages of Builder Pattern
  Readability: Clearly defines how an object is constructed, improving code readability.
  Step-by-step construction: Breaks down the creation process into manageable steps.
  Flexibility: Different objects with varying configurations can be built using the same process.
  Immutable Objects: Ensures the product object is immutable after its creation.

Disadvantages of Builder Pattern
  More code: Requires additional classes and code compared to straightforward instantiation.
  Overhead: May be overkill for simple objects or use cases with few attributes.

Variations
  Without a Director: The client uses the builder directly without a separate Director class.
  Method Chaining: As demonstrated in the example, the builder methods return the builder itself, enabling fluent chaining.

Real-world Examples
  StringBuilder in Java: Used to construct strings efficiently.
  Java's java.time API: Uses builders to configure complex date and time objects.
  UI Frameworks: Frameworks like JavaFX often use builders to create complex GUI components.
