Prototype Design Pattern in Depth
The Prototype Design Pattern is a creational design pattern that allows the creation of new objects by copying an existing object, known as the prototype, rather than instantiating from scratch. This pattern is particularly useful when object creation is resource-intensive or complex.

When to Use the Prototype Pattern?
  Costly Object Creation: When the cost of creating a new instance is high.
  Dynamic Object Configuration: When object configurations are not known in advance.
  Cloning: When similar objects are required in different states.
  Avoiding Subclass Explosion: Reduces the need for creating multiple subclasses for different configurations.

Key Components of the Prototype Pattern
  Prototype: An abstract base class or interface defining the clone method.
  ConcretePrototype: The class that implements the clone method to return a copy of itself.
  Client: Uses the prototype instance to create new objects by cloning.

Implementation Example: Cloning a Shape
  Step 1: Define the Prototype Interface
  Define the Prototype interface with the clone method.

  public interface Prototype {
      Prototype clone();
  }

  Step 2: Create Concrete Prototypes
  Create classes like Circle and Rectangle implementing the Prototype interface.

  public abstract class Shape implements Prototype {
      private String id;
      private String type;
  
      public String getId() {
          return id;
      }
  
      public void setId(String id) {
          this.id = id;
      }
  
      public String getType() {
          return type;
      }
  
      public void setType(String type) {
          this.type = type;
      }
  
      @Override
      public abstract Shape clone();
  }
  
  public class Circle extends Shape {
      private int radius;
  
      public Circle() {
          this.setType("Circle");
      }
  
      public int getRadius() {
          return radius;
      }
  
      public void setRadius(int radius) {
          this.radius = radius;
      }
  
      @Override
      public Circle clone() {
          Circle cloned = new Circle();
          cloned.setId(this.getId());
          cloned.setRadius(this.radius);
          return cloned;
      }
  
      @Override
      public String toString() {
          return "Circle [id=" + getId() + ", radius=" + radius + "]";
      }
  }
  
  public class Rectangle extends Shape {
      private int width;
      private int height;
  
      public Rectangle() {
          this.setType("Rectangle");
      }
  
      public int getWidth() {
          return width;
      }
  
      public void setWidth(int width) {
          this.width = width;
      }
  
      public int getHeight() {
          return height;
      }
  
      public void setHeight(int height) {
          this.height = height;
      }
  
      @Override
      public Rectangle clone() {
          Rectangle cloned = new Rectangle();
          cloned.setId(this.getId());
          cloned.setWidth(this.width);
          cloned.setHeight(this.height);
          return cloned;
      }
  
      @Override
      public String toString() {
          return "Rectangle [id=" + getId() + ", width=" + width + ", height=" + height + "]";
      }
  }

  Step 3: Demonstrate Usage
  Create and clone objects using the Prototype Pattern.
  import java.util.HashMap;
  import java.util.Map;
  
  public class PrototypeDemo {
      public static void main(String[] args) {
          // Create a registry of prototypes
          Map<String, Shape> shapeRegistry = new HashMap<>();
  
          // Add prototypes to the registry
          Circle circlePrototype = new Circle();
          circlePrototype.setId("1");
          circlePrototype.setRadius(5);
          shapeRegistry.put("circle", circlePrototype);
  
          Rectangle rectanglePrototype = new Rectangle();
          rectanglePrototype.setId("2");
          rectanglePrototype.setWidth(10);
          rectanglePrototype.setHeight(20);
          shapeRegistry.put("rectangle", rectanglePrototype);
  
          // Clone shapes from the registry
          Circle clonedCircle = (Circle) shapeRegistry.get("circle").clone();
          clonedCircle.setRadius(8); // Modify cloned object
  
          Rectangle clonedRectangle = (Rectangle) shapeRegistry.get("rectangle").clone();
  
          // Display cloned objects
          System.out.println("Original Circle: " + circlePrototype);
          System.out.println("Cloned Circle: " + clonedCircle);
  
          System.out.println("Original Rectangle: " + rectanglePrototype);
          System.out.println("Cloned Rectangle: " + clonedRectangle);
      }
  }

  Output
  Original Circle: Circle [id=1, radius=5]
  Cloned Circle: Circle [id=1, radius=8]
  Original Rectangle: Rectangle [id=2, width=10, height=20]
  Cloned Rectangle: Rectangle [id=2, width=10, height=20]

Advantages of the Prototype Pattern
Performance: Reduces the cost of creating new objects from scratch.
Dynamic Object Creation: Enables creating objects dynamically at runtime.
Simplifies Object Construction: Avoids creating multiple constructors for varying configurations.
Decouples Object Creation: The client doesn't need to know how objects are created.
Disadvantages of the Prototype Pattern
Deep Copy Complexity: Implementing deep cloning for complex objects can be challenging.
Cloning Inconsistencies: Errors in the clone method can lead to subtle bugs.
Dependency on Proper Cloning: Requires careful implementation to ensure all fields are correctly copied.
Real-World Examples
Object Cloning: Java's Object.clone() method is a basic implementation of the Prototype pattern.
Graphic Editors: Cloning shapes, text, and components for reuse.
Game Development: Reusing objects like enemies or items with slight modifications.
Best Practices
Use the Prototype Pattern when objects are expensive to create.
Prefer deep copying to ensure the cloned object is completely independent.
Maintain a registry of prototypes for better management and reusability.
